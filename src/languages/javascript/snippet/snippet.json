[
	{ 
		"snippet":[
			{
				"name":"for lopp",
				"short_name":"for",
				"body":"for(i=0;i<arr.length;i++){\n\tconsole.log(arr[i])\n}",
				"regex":"/!for/g",
				"description":"for loop",
				"type":"snippet"
			},
			{
				"name":"function",
				"short_name":"function",
				"body":"function hello(greeting){\n\t return greeting\n}",
				"regex":"/function!/g",
				"description":"function",
				"type":"snippet"
			},
			{
				"name":"function",
				"short_name":"anonymous",
				"body":"const hello(pr1,pr2)=> { \n\t return pr1*pr2\n}",
				"regex":"/function:arrow-function!",
				"description":"arrow-function",
				"type":"snippet"
			}
		]
	},
	{
		"keywords":[
	
			{
				"name":"await",
				"regex":"/await/",
				"description":"",
				"type":"keyword"

			},
			{
				"name":"break",
				"regex":"/break/g",
				"description":"",
				"type":"keyword"

			},
			{
				"name":"case",
				"regex":"/case/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"catch",
				"regex":"/catch/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"class",
				"regex":"/class/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"const",
				"regex":"/const/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"continue",
				"regex":"/continue/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"debugger",
				"regex":"/debugger/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"default",
				"regex":"/default/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"delete",
				"regex":"/delete/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"do",
				"regex":"/do/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"else",
				"regex":"/else/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"enum",
				"regex":"/enum/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"export",
				"regex":"/export/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"extends",
				"regex":"/extends/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"false",
				"regex":"/false/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"finally",
				"regex":"/finally/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"for",
				"regex":"/for/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"function",
				"regex":"/function/",
				"description":"",
				"type":"keyword"
			},
			
			{ 
				"name":"if",
				"regex":"/if/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"implements",
				"regex":"/implements/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"import",
				"regex":"/import/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"in",
				"regex":"/in/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"instanceof",
				"regex":"/instanceof/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"interface",
				"regex":"/interface/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"let",
				"regex":"/let/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"new",
				"regex":"/new/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"null",
				"regex":"/null/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"package",
				"regex":"/package/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"private",
				"regex":"/private/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"protected",
				"regex":"/protected/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"public",
				"regex":"/public/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"return",
				"regex":"/return/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"super",
				"regex":"/super/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"switch",
				"regex":"/switch/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"static",
				"regex":"/static/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"this",
				"regex":"/this/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"throw",
				"regex":"/throw/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"try",
				"regex":"/try/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"true",
				"regex":"/true/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"typeof",
				"regex":"/typeof/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"var",
				"regex":"/var/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"void",
				"regex":"/void/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"while",
				"regex":"/while/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"with",
				"regex":"/with/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"yield",
				"regex":"/yield/",
				"description":"",
				"type":"keyword"
			}

		]
	}


	


]
