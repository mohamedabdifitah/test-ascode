[
	{ 
		"snippet":[
			{
				"name":"for lopp",
				"short_name":"for",
				"body":"for(i=0;i<arr.length;i++){\n\tconsole.log(arr[i])\n}",
				"regex":"/!for/g",
				"description":"for loop",
				"type":"snippet"
			},
			{
				"name":"function",
				"short_name":"function",
				"body":"function hello(greeting){\n\t return greeting\n}",
				"regex":"/function!/g",
				"description":"function",
				"type":"snippet"
			},
			{
				"name":"function",
				"short_name":"anonymous",
				"body":"const hello(pr1,pr2)=> { \n\t return pr1*pr2\n}",
				"regex":"/function:arrow-function!",
				"description":"arrow-function",
				"type":"snippet"
			}
		]
	},
	{
		"keywords":[
	
			{
				"name":"await",
				"regex":"/await/",
				"description":"",
				"type":"keyword"

			},
			{
				"name":"break",
				"regex":"/break/g",
				"description":"",
				"type":"keyword"

			},
			{
				"name":"case",
				"regex":"/case/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"catch",
				"regex":"/catch/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"class",
				"regex":"/class/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"const",
				"regex":"/const/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"continue",
				"regex":"/continue/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"debugger",
				"regex":"/debugger/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"default",
				"regex":"/default/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"delete",
				"regex":"/delete/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"do",
				"regex":"/do/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"else",
				"regex":"/else/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"enum",
				"regex":"/enum/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"export",
				"regex":"/export/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"extends",
				"regex":"/extends/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"false",
				"regex":"/false/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"finally",
				"regex":"/finally/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"for",
				"regex":"/for/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"function",
				"regex":"/function/",
				"description":"",
				"type":"keyword"
			},
			
			{ 
				"name":"if",
				"regex":"/if/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"implements",
				"regex":"/implements/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"import",
				"regex":"/import/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"in",
				"regex":"/in/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"instanceof",
				"regex":"/instanceof/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"interface",
				"regex":"/interface/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"let",
				"regex":"/let/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"new",
				"regex":"/new/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"null",
				"regex":"/null/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"package",
				"regex":"/package/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"private",
				"regex":"/private/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"protected",
				"regex":"/protected/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"public",
				"regex":"/public/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"return",
				"regex":"/return/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"super",
				"regex":"/super/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"switch",
				"regex":"/switch/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"static",
				"regex":"/static/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"this",
				"regex":"/this/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"throw",
				"regex":"/throw/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"try",
				"regex":"/try/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"true",
				"regex":"/true/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"typeof",
				"regex":"/typeof/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"var",
				"regex":"/var/",
				"description":"",
				"type":"keyword"
			},
			{
				"name":"void",
				"regex":"/void/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"while",
				"regex":"/while/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"with",
				"regex":"/with/",
				"description":"",
				"type":"keyword"
			},
			{ 
				"name":"yield",
				"regex":"/yield/",
				"description":"",
				"type":"keyword"
			}

		],
		"window-object":{
			"name":"window",
			"constructor":[
				{
					"name":"DOMParser",
					"prefix":"window.DOMParser",
					"short_name":"DOMParser",
					"description":"The DOMParser interface provides the ability to parse XML or HTML source code from a string into a DOM Document",
					"methods":[
						{
							"name":"parseFromString()",
							"short_name":"DOMParser.parseFromString()",
							"prefix":"DOMParser.parseFromString()",
							"description":"DOMParser.parseFromString()The parseFromString() method of the DOMParser interface parses a string containing either HTML or XML, returning an HTMLDocument or an XMLDocument.",
							"type":"method"

							

						}
				

					],
					"type":"window constructor"
				},
				{
					"name":"Image()",
					"prefix":"window.Image()",
					"short_name":"Image()",
					"description":"#The Image()  constructor creates a new HTMLImageElement instance. It is functionally equivalent to document.createElement('img'). ```##Note: This function should not be confused with the CSS image() function.```",
					"parameter":[
						{
							"name":"width",
							"status":"number"
						},
						{
							"name":"height",
							"status":"number"
						}
					],
					"type":"window constructor"

				},
				{
					"name":"Option()",
					"prefix":"window.Option()",
					"short_name":"Option()",
					"description":"#The Option() constructor creates a new HTMLOptionElement.  #Syntax  ```js var optionElementReference = new Option(text, value, defaultSelected, selected);  #Parameters ##text **Optional**  A DOMString representing the content of the element, i.e. the displayed text. If this is not specified, a default value of '' (empty string) is used.  ##value **Optional**  A DOMString representing the value of the HTMLOptionElement, i.e. the value attribute of the equivalent <option>. If this is not specified, the value of text is used as the value, e.g. for the associated <select> element's value when the form is submitted to the server.  ##defaultSelected **Optional**  A value of either true or false that sets the selected attribute value, i.e. so that this <option> will be the default value selected in the <select> element when the page is first loaded. If this is not specified, a default value of false is used. Note that a value of true does not set the option to selected if it is not already selected.  ##selected **Optional**  A value of either true or false that sets the option's selected state; the default is false (not selected). If omitted, even if the defaultSelected argument is true, the option is not selected.",
					"parameters":[
						{
							"name":"text",
							"status":"boolean"

						},
						{
							"name":"value",
							"status":"boolean"

						},
						{
							"name":"defaultSelected",
							"status":"boolean"
						},
						{
							"name":"selected",
							"status":"boolean"
						}



					],
					"type":"window constructor"

				},
				{
					"name":"StaticRangei()",
					"prefix":"window.StaticRange()",
					"short_name":"StaticRange",
					"description":"# The StaticRange()  constructor creates a new StaticRange object representing a span of content within the DOM.This constructor includes properties identifying the standard and end positions of the range as well as a Boolean indicating whether or not the range is collapsed (that is, empty).  ## Syntax  ```js var staticRange = new StaticRange(rangeSpec)``` ## Parameters ### rangeSpec  The required rangeSpec parameter is an object containing the four following properties:-startContainer **The Node in which the starting point of the range is located.** -startOffset **The offset into the starting node at which the first character of the range is found.** -endContainer **The Node in which the end point of the range is located.** -endOffset **The offset into the node indicated by endOffset at which the last character in the range is located.** ## Return value  A new StaticRange object initialized with the values given in the rangeSpec object.## Exceptions  ### InvalidNodeTypeError  A DOMException fired if either or both of the startContainer and/or endContainer are a type of node which you can't include in a range. Those node types are Node.DOCUMENT_TYPE_NODE (representing the DocumentType node derived from the DTD identified using the doctype preamble in the HTML, for example) and the Attr node describing an attribute of an element on the DOM..",
					"properties":[
						{
							"name":"collapsed()",
							"prefix":"StaticRange.collapsed()",
							"description":"#StaticRange.collapsed **Read only**  ##Returns  a Boolean value which is true if the range's start and end positions are the same, resulting in a range of length 0",
							"inheritance":"",
							"type":"properties"


						}],
					"parameters":[
						{
							"name":"rangeSpec",
							"status":"object",
							"elements":[
								{
									"name":"startContainer"
								},
								{
									"name":"startOffset"
								},
								{
									"name":"endContainer"
								},
								{
									"name":"endOffset"
								}


							]

						}
					],
					"type":"window constructor"

				},
				{
					"name":"Worker()",
					"prefix":"window.Worker()",
					"short_name":"worker()",
					"description":"The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy.",
					"parameters":[
						{
							"name":"aURL",
							"status":"normal"
						},
						{
							"name":"options",
							"status":"object",
							"elements":[
								{
									"name":"type"
								},
								{
									"name":"credentials"
								},
								{
									"name":"name"
								}

							]


						}

					],
					"type":"window constructor"
					

				},
				{
					"name":"XMLSerializer()",
					"prefix":"window.XMLSerializer()",
					"short_name":"XMLSerializer()",
					"description":"The XMLSerializer interface provides the serializeToString() method to construct an XML string representing a DOM tree.",
					"methods":[
						{
							"name":"serializeToString()"

						}

					],
					"type":"window constructor"


				}
			],
			"properties":[

			],
			"methods":[

			],
			"type":"global object"

		}
	}


	


]
